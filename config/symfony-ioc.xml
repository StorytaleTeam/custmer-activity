<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">
    <parameters>
        <!-- Doctrine start -->
        <parameter type="collection" key="db.psql.connection.master">
            <parameter type="string" key="host">%env(DB_PSQL_CONNECTION_MASTER_HOST)%</parameter>
            <parameter type="string" key="port">%env(DB_PSQL_CONNECTION_MASTER_PORT)%</parameter>
            <parameter type="string" key="user">%env(DB_PSQL_CONNECTION_MASTER_USER)%</parameter>
            <parameter type="string" key="password">%env(DB_PSQL_CONNECTION_MASTER_PASSWORD)%</parameter>
            <parameter type="string" key="dbname">%env(DB_PSQL_CONNECTION_MASTER_DBNAME)%</parameter>
            <parameter type="string" key="charset">%env(DB_PSQL_CONNECTION_MASTER_CHARSET)%</parameter>
        </parameter>

        <parameter type="collection" key="db.psql.connection.slave">
            <parameter type="string" key="host">%env(DB_PSQL_CONNECTION_SLAVE_HOST)%</parameter>
            <parameter type="string" key="port">%env(DB_PSQL_CONNECTION_SLAVE_PORT)%</parameter>
            <parameter type="string" key="user">%env(DB_PSQL_CONNECTION_SLAVE_USER)%</parameter>
            <parameter type="string" key="password">%env(DB_PSQL_CONNECTION_SLAVE_PASSWORD)%</parameter>
            <parameter type="string" key="dbname">%env(DB_PSQL_CONNECTION_SLAVE_DBNAME)%</parameter>
            <parameter type="string" key="charset">%env(DB_PSQL_CONNECTION_SLAVE_CHARSET)%</parameter>
        </parameter>

        <parameter type="string" key="doctrine.orm.configuration.isDev">$env(DOCTRINE_CONFIGURATION_IS_DEV)</parameter>
        <parameter type="string" key="doctrine.orm.configuration.proxyDir">%kernel.project_dir%/runtime/Doctrine/Proxies</parameter>
        <parameter type="string" key="doctrine.cache.adapter.class">%env(DOCTRINE_CACHE_ADAPTER_CLASS)%</parameter>
        <!-- Doctrine end -->

        <!-- EventBus -->
        <parameter type="collection" key="eventBus.amqp.connection">
            <parameter type="string" key="host">%env(AMQP_CONNECTION_HOST)%</parameter>
            <parameter type="string" key="port">%env(AMQP_CONNECTION_PORT)%</parameter>
            <parameter type="string" key="vhost">%env(AMQP_CONNECTION_VHOST)%</parameter>
            <parameter type="string" key="login">%env(AMQP_CONNECTION_LOGIN)%</parameter>
            <parameter type="string" key="password">%env(AMQP_CONNECTION_PASSWORD)%</parameter>
        </parameter>

        <parameter type="collection" key="eventBus.amqp.exchangeConfig">
            <parameter type="string" key="name">storytaleMessageBus</parameter>
            <parameter type="string" key="type">fanout</parameter>
            <parameter type="collection" key="arguments"/>
            <parameter type="binary" key="flags">2</parameter>
        </parameter>
        <!-- EventBus end -->
    </parameters>

    <services>
        <!-- Doctrine start -->
        <service id="doctrine.metadata.driver" class="Doctrine\ORM\Mapping\Driver\XmlDriver">
            <argument type="collection">
                <argument>%kernel.project_dir%/src/PortAdapters/Secondary/Customer/Persistence/Doctrine/Mapping/</argument>
                <argument>%kernel.project_dir%/src/PortAdapters/Secondary/Subscription/Persistence/Doctrine/Mapping/</argument>
                <argument>%kernel.project_dir%/src/PortAdapters/Secondary/Order/Persistence/Doctrine/Mapping/</argument>
            </argument>
        </service>

        <service id="doctrine.migrations.configuration" class="Doctrine\Migrations\Configuration\Configuration" public="true">
            <argument type="service" id="doctrine.orm.connection"/>
            <call method="setMigrationsDirectory">
                <argument>%kernel.project_dir%/runtime/Doctrine/Migrations</argument>
            </call>
            <call method="setMigrationsNamespace">
                <argument>Doctrine\Migrations</argument>
            </call>
            <call method="setMigrationsTableName">
                <argument>migrations</argument>
            </call>
            <call method="setMigrationsColumnName">
                <argument>version</argument>
            </call>
        </service>

        <service id="doctrine.orm.configuration" class="Doctrine\ORM\Configuration">
            <factory class="Storytale\PortAdapters\Secondary\Persistence\Doctrine\DoctrineConfiguratorSetup" method="createConfiguration"/>
            <argument>%doctrine.orm.configuration.isDev%</argument>
            <argument>%doctrine.orm.configuration.proxyDir%</argument>
            <argument type="service" id="doctrine.orm.configuration.cache"/>
            <argument type="collection"/>
            <call method="setMetadataDriverImpl">
                <argument type="service" id="doctrine.metadata.driver"/>
            </call>
        </service>

        <service id="doctrine.orm.configuration.cache" class="%doctrine.cache.adapter.class%"/>

        <service id="doctrine.dbal.driver.pdopgsql" class="Doctrine\DBAL\Driver\PDOPgSql\Driver"/>

        <service id="storytale.portAdapters.inner.persistence.doctrine.EventCollectorSubscriber" class="Storytale\PortAdapters\Secondary\Persistence\Doctrine\EventCollectorSubscriber"/>

        <service id="doctrine.common.eventmanager" class="Doctrine\Common\EventManager">
            <call method="addEventSubscriber">
                <argument type="service" id="storytale.portAdapters.inner.persistence.doctrine.EventCollectorSubscriber"/>
            </call>
        </service>

        <service id="doctrine.orm.connection" class="Doctrine\DBAL\Connection" public="true">
            <argument>%db.psql.connection.master%</argument>
            <argument type="service" id="doctrine.dbal.driver.pdopgsql"/>
            <argument>null</argument>
            <argument type="service" id="doctrine.common.eventmanager"/>
        </service>

        <service id="doctrine.orm.entityManager" class="Doctrine\ORM\EntityManager" public="true">
            <factory class="Doctrine\ORM\EntityManager" method="create"/>
            <argument type="service" id="doctrine.orm.connection"/>
            <argument type="service" id="doctrine.orm.configuration"/>
            <argument type="service" id="doctrine.common.eventmanager"/>
        </service>

        <service id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession" class="Storytale\PortAdapters\Secondary\Persistence\Doctrine\DoctrineDomainSession">
            <argument type="service" id="doctrine.orm.entityManager"/>
        </service>
        <!-- Doctrine end -->

        <!-- EventBus -->
        <service id="amqp.connection" class="AMQPConnection">
            <argument>%eventBus.amqp.connection%</argument>
        </service>

        <service id="storytale.portAdapters.secondary.eventBus.rabbitMQ.rabbitMQEventBusPublisher" class="Storytale\PortAdapters\Secondary\EventBus\RabbitMQ\RabbitMQEventBusPublisher">
            <argument>%eventBus.amqp.exchangeConfig%</argument>
            <argument type="service" id="amqp.connection"/>
        </service>

        <service id="storytale.portAdapters.secondary.eventBus.rabbitMQ.rabbitMQEventBusSubscriber" class="Storytale\PortAdapters\Secondary\EventBus\RabbitMQ\RabbitMQEventBusSubscriber">
            <argument type="collection">
                <argument key="name">%env(AMQP_QUEUE_NAME)%</argument>
                <argument key="flags">%env(AMQP_QUEUE_FLAGS)%</argument>
            </argument>
            <argument>%eventBus.amqp.exchangeConfig%</argument>
            <argument type="service" id="amqp.connection"/>
        </service>

        <service id="storytale.contracts.sharedEvents.eventHandlersMap" class="Storytale\Contracts\SharedEvents\EventHandlersMap" public="true">
            <argument type="collection">
                <argument key="account.user.newUserWasRegistered" type="service" id="storytale.customerActivity.application.command.customer.externalEvent.onNewUserWasRegisteredHandler"/>
                <argument key="payment.invoice.invoiceWasAuthorized" type="service" id="storytale.customerActivity.application.command.subscription.externalEvent.onInvoiceWasAuthorizedHandler"/>
                <argument key="account.user.newUserWasMigratedEvent" type="service" id="storytale.customerActivity.application.command.customer.externalEvent.onNewUserWasMigratedEventHandler"/>
            </argument>
        </service>

        <service id="storytale.contracts.sharedEvents.eventsMap" class="Storytale\Contracts\SharedEvents\EventsMap" public="true">
            <argument type="collection">
                <argument key="account.user.newUserWasRegistered">Storytale\Contracts\SharedEvents\User\NewUserWasRegistered</argument>
                <argument key="payment.invoice.invoiceWasAuthorized">Storytale\Contracts\SharedEvents\Payment\InvoiceWasAuthorizedEvent</argument>
                <argument key="event.paddle.generalized">Storytale\Contracts\SharedEvents\Payment\Paddle\GeneralizedPaddleEvent</argument>
                <argument key="account.user.newUserWasMigratedEvent">Storytale\Contracts\SharedEvents\User\NewUserWasMigratedEvent</argument>
            </argument>
        </service>

        <service id="storytale.portAdapters.secondary.eventBus.storytaleEventBus" class="Storytale\PortAdapters\Secondary\EventBus\StorytaleEventBus" public="true">
            <argument type="service" id="storytale.portAdapters.secondary.eventBus.rabbitMQ.rabbitMQEventBusPublisher"/>
            <argument type="service" id="storytale.portAdapters.secondary.eventBus.rabbitMQ.rabbitMQEventBusSubscriber"/>
        </service>
        <!-- EventBus end -->

        <service id="AuraPgSQLQueryFactory" class="Aura\SqlQuery\QueryFactory">
            <argument type="string">pgsql</argument>
        </service>

        <service id="AuraMySQLQueryFactory" class="Aura\SqlQuery\QueryFactory">
            <argument type="string">mysql</argument>
        </service>

        <service id="storytale.portAdapters.secondary.dataBase.sql.storytaleTeam.storytalePdoConnection" class="Storytale\PortAdapters\Secondary\DataBase\Sql\StorytaleTeam\StorytalePdoConnection">
            <argument>pgsql:dbname=%env(DB_PSQL_CONNECTION_SLAVE_DBNAME)%;host=%env(DB_PSQL_CONNECTION_SLAVE_HOST)%;port=%env(DB_PSQL_CONNECTION_SLAVE_PORT)%</argument>
            <argument>%env(DB_PSQL_CONNECTION_SLAVE_USER)%</argument>
            <argument>%env(DB_PSQL_CONNECTION_SLAVE_PASSWORD)%</argument>
        </service>

        <service id="storytale.portAdapters.secondary.dataBase.sql.storytaleTeam.storytalePdoConnection_for_old_db" class="Storytale\PortAdapters\Secondary\DataBase\Sql\StorytaleTeam\StorytalePdoConnection">
            <argument>mysql:dbname=%env(DB_PSQL_CONNECTION_OLD_DBNAME)%;host=%env(DB_PSQL_CONNECTION_OLD_HOST)%;port=%env(DB_PSQL_CONNECTION_OLD_PORT)%</argument>
            <argument>%env(DB_PSQL_CONNECTION_OLD_USER)%</argument>
            <argument>%env(DB_PSQL_CONNECTION_OLD_PASSWORD)%</argument>
        </service>

        <!-- Logger start -->
        <service id="gelf.transport.tcpTransport" class="Gelf\Transport\TcpTransport">
            <argument>%env(GELF_TCP_TRANSPORT_HOST)%</argument>
            <argument>%env(GELF_TCP_TRANSPORT_PORT)%</argument>
            <call method="setConnectTimeout">
                <argument>%env(GELF_TCP_TRANSPORT_TIMEOUT)%</argument>
            </call>
        </service>

        <service id="gelf.publisher" class="Gelf\Publisher">
            <argument type="service" id="gelf.transport.tcpTransport"/>
        </service>

        <service id="storytale.portAdapters.secondary.logger.gelf.gelfLogger" class="Storytale\PortAdapters\Secondary\Logger\Gelf\GelfLogger">
            <argument type="service" id="gelf.publisher"/>
            <argument>%env(GELF_LOGGER_FACILITY)%</argument>
        </service>

        <service id="zend.log.writer.stream" class="Zend\Log\Writer\Stream">
            <argument>%env(GELF_LOGGER_STREAM)%</argument>
            <argument>null</argument>
            <argument type="constant">PHP_EOL</argument>
        </service>

        <service id="zend.log.logger" class="Zend\Log\Logger">
            <call method="addWriter">
                <argument type="service" id="zend.log.writer.stream"/>
            </call>
        </service>

        <service id="storytale.portAdapters.secondary.logger.zend.zendLogger" class="Storytale\PortAdapters\Secondary\Logger\Zend\ZendLogger">
            <argument type="service" id="zend.log.logger"/>
        </service>

        <service id="storytale.portAdapters.secondary.logger.chainLogger" class="Storytale\PortAdapters\Secondary\Logger\Chain\ChainLogger" public="true">
            <argument type="collection">
<!--                <argument type="service" id="storytale.portAdapters.secondary.logger.gelf.gelfLogger"/>-->
                <argument type="service" id="storytale.portAdapters.secondary.logger.zend.zendLogger"/>
            </argument>
        </service>
        <!-- Logger end -->

        <!--Controllers start-->
        <service id="RestAPI\Controller\IndexController" class="RestAPI\Controller\IndexController" public="true"/>

        <service id="RestAPI\Controller\SubscriptionPlanController" class="RestAPI\Controller\SubscriptionPlanController" public="true">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.querying.aura.auraSubscriptionPlanDataProvider"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.subscriptionPlanService"/>
        </service>

        <service id="RestAPI\Controller\SubscriptionPlanCustomerController" class="RestAPI\Controller\SubscriptionPlanCustomerController" public="true">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.querying.aura.auraSubscriptionPlanDataProvider"/>
        </service>

        <service id="RestAPI\Controller\CustomerController" class="RestAPI\Controller\CustomerController" public="true">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.querying.aura.auraCustomerDataProvider"/>
        </service>

        <service id="RestAPI\Controller\SubscriptionController" class="RestAPI\Controller\SubscriptionController" public="true">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.querying.aura.auraSubscriptionDataProvider"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.subscriptionService"/>
        </service>

        <service id="RestAPI\Controller\SubscriptionCustomerController" class="RestAPI\Controller\SubscriptionCustomerController" public="true">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.querying.aura.auraSubscriptionDataProvider"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.subscriptionService"/>
        </service>

        <service id="RestAPI\Controller\DownloadCustomerController" class="RestAPI\Controller\DownloadCustomerController" public="true">
            <argument type="service" id="storytale.customerActivity.application.command.download.downloadService"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.querying.aura.auraCustomerDataProvider"/>
        </service>

        <service id="RestAPI\Controller\LikeCustomerController" class="RestAPI\Controller\LikeCustomerController" public="true">
            <argument type="service" id="storytale.customerActivity.application.command.customer.likeService"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.querying.aura.auraCustomerDataProvider"/>
        </service>

        <service id="RestAPI\Controller\IllustrationController" class="RestAPI\Controller\IllustrationController" public="true">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.illustration.querying.aura.auraIllustrationDataProvider"/>
        </service>

        <service id="RestAPI\Controller\OrderController" class="RestAPI\Controller\OrderController" public="true">
            <argument type="service" id="storytale.customerActivity.application.command.order.orderService"/>
        </service>

        <service id="RestAPI\Controller\OrderCustomerController" class="RestAPI\Controller\OrderCustomerController" public="true">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.order.querying.aura.auraOrderDataProvider"/>
        </service>
        <!--Controllers end-->

    <!-- DTO Validation -->
        <service id="storytale.customerActivity.application.command.subscription.dto.subscriptionPlanDTOValidation" class="Storytale\CustomerActivity\Application\Command\Subscription\DTO\SubscriptionPlanDTOValidation"/>
        <service id="storytale.customerActivity.application.command.subscription.dto.subscriptionSigningDTOValidation" class="Storytale\CustomerActivity\Application\Command\Subscription\DTO\SubscriptionSigningDTOValidation"/>
        <service id="storytale.customerActivity.application.command.order.dto.productPositionDTOValidation" class="Storytale\CustomerActivity\Application\Command\Order\DTO\ProductPositionDTOValidation"/>
        <service id="storytale.customerActivity.application.command.order.dto.confirmOrderDTOValidation" class="Storytale\CustomerActivity\Application\Command\Order\DTO\ConfirmOrderDTOValidation"/>

        <service id="storytale.customerActivity.application.command.order.dto.createOrderDTOValidation" class="Storytale\CustomerActivity\Application\Command\Order\DTO\CreateOrderDTOValidation">
            <argument type="service" id="storytale.customerActivity.application.command.order.dto.productPositionDTOValidation"/>
        </service>
    <!-- DTO Validation END -->

    <!-- Command start -->
        <service id="storytale.customerActivity.application.command.subscription.subscriptionPlanService" class="Storytale\CustomerActivity\Application\Command\Subscription\SubscriptionPlanService">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.persistence.doctrine.doctrineSubscriptionPlanRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.subscription.subscriptionPlanFactory"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.dto.subscriptionPlanDTOValidation"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.subscription.specification.isSubscriptionPlanCanMoveToStatusSpecification"/>
        </service>

        <service id="storytale.customerActivity.application.command.subscription.subscriptionService" class="Storytale\CustomerActivity\Application\Command\Subscription\SubscriptionService">
            <argument type="service" id="storytale.customerActivity.domain.persistModel.subscription.subscriptionProcessingService"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.persistence.doctrine.doctrineSubscriptionPlanRepository"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineCustomerRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.persistence.doctrine.doctrineSubscriptionRepository"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.dto.subscriptionSigningDTOValidation"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.payment.storytalePaymentService"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.dto.subscriptionDTOAssembler"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.paddle.paddleSubscriptionService"/>
            <argument type="service" id="storytale.portAdapters.secondary.eventBus.storytaleEventBus"/>
        </service>

        <service id="storytale.customerActivity.application.command.download.downloadService" class="Storytale\CustomerActivity\Application\Command\Download\DownloadService">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineCustomerRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.customer.downloadProcessingService"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.illustration.querying.storytale.storytaleRemoteIllustrationDataProvider"/>
            <argument type="service" id="storytale.portAdapters.secondary.eventBus.storytaleEventBus"/>
        </service>

        <service id="storytale.customerActivity.application.command.customer.likeService" class="Storytale\CustomerActivity\Application\Command\Customer\LikeService">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineLikeRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineCustomerRepository"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.customer.customerLikeFactory"/>
            <argument type="service" id="storytale.portAdapters.secondary.eventBus.storytaleEventBus"/>
        </service>

        <service id="storytale.customerActivity.application.command.order.orderService" class="Storytale\CustomerActivity\Application\Command\Order\OrderService">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.order.persistence.doctrine.doctrineOrderRepository"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.persistence.doctrine.doctrineSubscriptionPlanRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.order.productPositionFactory"/>
            <argument type="service" id="storytale.customerActivity.application.command.order.dto.createOrderDTOValidation"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.order.orderFactory"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineCustomerRepository"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.order.storytaleProductPositionsService"/>
            <argument type="service" id="storytale.customerActivity.application.command.order.dto.confirmOrderDTOValidation"/>
            <argument type="service" id="storytale.customerActivity.application.command.order.dto.orderDTOAssembler"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.order.persistence.doctrine.doctrineOrderRepository"/>
        </service>
    <!-- Command end -->

    <!-- DTO Assembler -->
        <service id="storytale.customerActivity.application.command.subscription.dto.subscriptionDTOAssembler" class="Storytale\CustomerActivity\Application\Command\Subscription\DTO\SubscriptionDTOAssembler">
            <argument type="service" id="storytale.customerActivity.application.command.subscription.dto.subscriptionPlanDTOAssembler"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.dto.membershipDTOAssembler"/>
        </service>
        <service id="storytale.customerActivity.application.command.subscription.dto.subscriptionPlanDTOAssembler" class="Storytale\CustomerActivity\Application\Command\Subscription\DTO\SubscriptionPlanDTOAssembler"/>
        <service id="storytale.customerActivity.application.command.subscription.dto.membershipDTOAssembler" class="Storytale\CustomerActivity\Application\Command\Subscription\DTO\MembershipDTOAssembler"/>
        <service id="storytale.customerActivity.application.command.order.dto.productPositionDTOAssembler" class="Storytale\CustomerActivity\Application\Command\Order\DTO\ProductPositionDTOAssembler"/>
        <service id="storytale.customerActivity.application.command.order.dto.orderDTOAssembler" class="Storytale\CustomerActivity\Application\Command\Order\DTO\OrderDTOAssembler">
             <argument type="service" id="storytale.customerActivity.application.command.order.dto.productPositionDTOAssembler"/>
        </service>
    <!-- DTO Assembler END -->

    <!-- Query -->
        <service id="storytale.customerActivity.portAdapters.secondary.customer.querying.aura.auraCustomerDataProvider" class="Storytale\CustomerActivity\PortAdapters\Secondary\Customer\Querying\Aura\AuraCustomerDataProvider">
            <argument type="service" id="storytale.portAdapters.secondary.dataBase.sql.storytaleTeam.storytalePdoConnection"/>
            <argument type="service" id="AuraPgSQLQueryFactory"/>
        </service>

        <service id="storytale.customerActivity.portAdapters.secondary.subscription.querying.aura.auraSubscriptionDataProvider" class="Storytale\CustomerActivity\PortAdapters\Secondary\Subscription\Querying\Aura\AuraSubscriptionDataProvider">
            <argument type="service" id="storytale.portAdapters.secondary.dataBase.sql.storytaleTeam.storytalePdoConnection"/>
            <argument type="service" id="AuraPgSQLQueryFactory"/>
        </service>

        <service id="storytale.customerActivity.portAdapters.secondary.subscription.querying.aura.auraSubscriptionPlanDataProvider" class="Storytale\CustomerActivity\PortAdapters\Secondary\Subscription\Querying\Aura\AuraSubscriptionPlanDataProvider">
            <argument type="service" id="storytale.portAdapters.secondary.dataBase.sql.storytaleTeam.storytalePdoConnection"/>
            <argument type="service" id="AuraPgSQLQueryFactory"/>
        </service>

        <service id="storytale.customerActivity.portAdapters.secondary.illustration.querying.aura.auraIllustrationDataProvider" class="Storytale\CustomerActivity\PortAdapters\Secondary\Illustration\Querying\Aura\AuraIllustrationDataProvider">
            <argument type="service" id="storytale.portAdapters.secondary.dataBase.sql.storytaleTeam.storytalePdoConnection"/>
            <argument type="service" id="AuraPgSQLQueryFactory"/>
        </service>

        <service id="storytale.customerActivity.portAdapters.secondary.illustration.querying.storytale.storytaleRemoteIllustrationDataProvider" class="Storytale\CustomerActivity\PortAdapters\Secondary\Illustration\Querying\Storytale\StorytaleRemoteIllustrationDataProvider">
            <argument type="service" id="storytale.portAdapters.secondary.serviceClient.inventory.inventoryServiceClient"/>
        </service>

        <service id="storytale.customerActivity.portAdapters.secondary.customer.querying.aura.auraOldCustomerDataProvider" class="Storytale\CustomerActivity\PortAdapters\Secondary\Customer\Querying\Aura\AuraOldCustomerDataProvider">
            <argument type="service" id="storytale.portAdapters.secondary.dataBase.sql.storytaleTeam.storytalePdoConnection_for_old_db"/>
            <argument type="service" id="AuraMySQLQueryFactory"/>
        </service>

        <service id="storytale.customerActivity.portAdapters.secondary.order.querying.aura.auraOrderDataProvider" class="Storytale\CustomerActivity\PortAdapters\Secondary\Order\Querying\Aura\AuraOrderDataProvider">
            <argument type="service" id="storytale.portAdapters.secondary.dataBase.sql.storytaleTeam.storytalePdoConnection"/>
            <argument type="service" id="AuraPgSQLQueryFactory"/>
        </service>
    <!-- Query END -->

    <!--  ExternalEvent handler -->
        <service id="storytale.customerActivity.application.command.customer.externalEvent.onNewUserWasRegisteredHandler" class="Storytale\CustomerActivity\Application\Command\Customer\ExternalEvent\OnNewUserWasRegisteredHandler">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineCustomerRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.customer.customerFactory"/>
        </service>

        <service id="storytale.customerActivity.application.command.customer.externalEvent.onNewUserWasMigratedEventHandler" class="Storytale\CustomerActivity\Application\Command\Customer\ExternalEvent\OnNewUserWasMigratedEventHandler">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineCustomerRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.customer.customerFactory"/>
        </service>

        <service id="storytale.customerActivity.application.command.subscription.externalEvent.onInvoiceWasAuthorizedHandler" class="Storytale\CustomerActivity\Application\Command\Subscription\ExternalEvent\OnInvoiceWasAuthorizedHandler">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.persistence.doctrine.doctrineSubscriptionRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.subscription.subscriptionProcessingService"/>
            <argument type="service" id="storytale.portAdapters.secondary.eventBus.storytaleEventBus"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.dto.membershipDTOAssembler"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.dto.subscriptionDTOAssembler"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.order.persistence.doctrine.doctrineOrderRepository"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.subscription.subscriptionFactory"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.order.storytaleProductPositionsService"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.paddle.paddleSubscriptionService"/>
        </service>
    <!--  ExternalEvent handler END -->

    <!-- Repository -->
        <service id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineCustomerRepository" class="Storytale\CustomerActivity\PortAdapters\Secondary\Customer\Persistence\Doctrine\DoctrineCustomerRepository">
            <argument type="service" id="doctrine.orm.entityManager"/>
        </service>

        <service id="storytale.customerActivity.portAdapters.secondary.subscription.persistence.doctrine.doctrineSubscriptionRepository" class="Storytale\CustomerActivity\PortAdapters\Secondary\Subscription\Persistence\Doctrine\DoctrineSubscriptionRepository">
            <argument type="service" id="doctrine.orm.entityManager"/>
        </service>

        <service id="storytale.customerActivity.portAdapters.secondary.subscription.persistence.doctrine.doctrineSubscriptionPlanRepository" class="Storytale\CustomerActivity\PortAdapters\Secondary\Subscription\Persistence\Doctrine\DoctrineSubscriptionPlanRepository">
            <argument type="service" id="doctrine.orm.entityManager"/>
        </service>

        <service id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineLikeRepository" class="Storytale\CustomerActivity\PortAdapters\Secondary\Customer\Persistence\Doctrine\DoctrineLikeRepository">
            <argument type="service" id="doctrine.orm.entityManager"/>
        </service>

        <service id="storytale.customerActivity.portAdapters.secondary.order.persistence.doctrine.doctrineOrderRepository" class="Storytale\CustomerActivity\PortAdapters\Secondary\Order\Persistence\Doctrine\DoctrineOrderRepository">
            <argument type="service" id="doctrine.orm.entityManager"/>
        </service>
    <!-- Repository END -->

    <!-- Specification -->
        <service id="storytale.customerActivity.domain.persistModel.subscription.specification.isCustomerCanChangeSubscriptionPlanSpecification" class="Storytale\CustomerActivity\Domain\PersistModel\Subscription\Specification\IsCustomerCanChangeSubscriptionPlanSpecification"/>
        <service id="storytale.customerActivity.domain.persistModel.subscription.specification.isModeratorCanChangeSubscriptionPlanSpecification" class="Storytale\CustomerActivity\Domain\PersistModel\Subscription\Specification\IsModeratorCanChangeSubscriptionPlanSpecification"/>
        <service id="storytale.customerActivity.domain.persistModel.subscription.specification.subscriptionCanBeProlongatedSpecification" class="Storytale\CustomerActivity\Domain\PersistModel\Subscription\Specification\SubscriptionCanBeProlongatedSpecification"/>
        <service id="storytale.customerActivity.domain.persistModel.subscription.specification.isSubscriptionPlanCanMoveToStatusSpecification" class="Storytale\CustomerActivity\Domain\PersistModel\Subscription\Specification\IsSubscriptionPlanCanMoveToStatusSpecification" />
    <!-- Specification END -->

    <!-- DomainService -->
        <service id="storytale.customerActivity.domain.persistModel.subscription.subscriptionProcessingService" class="Storytale\CustomerActivity\Domain\PersistModel\Subscription\SubscriptionProcessingService">
            <argument type="service" id="storytale.customerActivity.domain.persistModel.subscription.subscriptionFactory"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.subscription.specification.isCustomerCanChangeSubscriptionPlanSpecification"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.subscription.specification.isModeratorCanChangeSubscriptionPlanSpecification"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.subscription.membershipFactory"/>
        </service>

        <service id="storytale.customerActivity.domain.persistModel.customer.downloadProcessingService" class="Storytale\CustomerActivity\Domain\PersistModel\Customer\DownloadProcessingService">
            <argument type="service" id="storytale.customerActivity.domain.persistModel.customer.customerDownloadFactory"/>
        </service>
    <!-- DomainService END -->

    <!-- Factory -->
        <service id="storytale.customerActivity.domain.persistModel.subscription.subscriptionFactory" class="Storytale\CustomerActivity\Domain\PersistModel\Subscription\SubscriptionFactory"/>
        <service id="storytale.customerActivity.domain.persistModel.subscription.subscriptionPlanFactory" class="Storytale\CustomerActivity\Domain\PersistModel\Subscription\SubscriptionPlanFactory" />
        <service id="storytale.customerActivity.domain.persistModel.customer.customerFactory" class="Storytale\CustomerActivity\Domain\PersistModel\Customer\CustomerFactory"/>
        <service id="storytale.customerActivity.domain.persistModel.customer.customerDownloadFactory" class="Storytale\CustomerActivity\Domain\PersistModel\Customer\CustomerDownloadFactory"/>
        <service id="storytale.customerActivity.domain.persistModel.customer.customerLikeFactory" class="Storytale\CustomerActivity\Domain\PersistModel\Customer\CustomerLikeFactory"/>
        <service id="storytale.customerActivity.domain.persistModel.subscription.membershipFactory" class="Storytale\CustomerActivity\Domain\PersistModel\Subscription\MembershipFactory"/>
        <service id="storytale.customerActivity.domain.persistModel.order.productPositionFactory" class="Storytale\CustomerActivity\Domain\PersistModel\Order\ProductPositionFactory"/>
        <service id="storytale.customerActivity.domain.persistModel.order.orderFactory" class="Storytale\CustomerActivity\Domain\PersistModel\Order\OrderFactory"/>
    <!-- Factory END -->

    <!-- PortAdapter service -->
        <service id="storytale.customerActivity.portAdapters.secondary.payment.storytalePaymentService" class="Storytale\CustomerActivity\PortAdapters\Secondary\Payment\StorytalePaymentService">
            <argument type="service" id="storytale.portAdapters.secondary.serviceClient.payment.paymentServiceClient"/>
        </service>

        <service id="storytale.customerActivity.portAdapters.secondary.order.storytaleProductPositionsService" class="Storytale\CustomerActivity\PortAdapters\Secondary\Order\StorytaleProductPositionsService">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.persistence.doctrine.doctrineSubscriptionPlanRepository"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.order.productPositionFactory"/>
        </service>
    <!-- PortAdapter service END -->

    <!-- Service client -->
        <service id="zend.http.client" class="Zend\Http\Client">
            <call method="setOptions">
                <argument type="collection">
                    <argument key="timeout">%env(SERVICE_CLIENT_TIMEOUT)%</argument>
                </argument>
            </call>
        </service>

        <service id="storytale.portAdapters.secondary.serviceClient.inventory.inventoryServiceClient" class="Storytale\PortAdapters\Secondary\ServiceClient\Inventory\InventoryServiceClient">
            <argument type="service" id="zend.http.client"/>
            <argument>%env(INVENTORY_SERVICE_URL)%</argument>
        </service>

        <service id="storytale.portAdapters.secondary.serviceClient.payment.paymentServiceClient" class="Storytale\PortAdapters\Secondary\ServiceClient\Payment\PaymentServiceClient">
            <argument type="service" id="zend.http.client"/>
            <argument>%env(PAYMENT_SERVICE_URL)%</argument>
        </service>

        <service id="storytale.portAdapters.secondary.serviceClient.paddle.paddleServiceClient" class="Storytale\PortAdapters\Secondary\ServiceClient\Paddle\PaddleServiceClient">
            <argument type="service" id="zend.http.client"/>
            <argument>%env(PADDLE_SERVICE_URL)%</argument>
            <argument>%env(PADDLE_VENDOR_ID)%</argument>
            <argument>%env(PADDLE_VENDOR_AUTH_CODE)%</argument>
        </service>
        <!-- Service client END -->

        <!-- Port adapter -->
        <service id="storytale.customerActivity.portAdapters.secondary.subscription.paddle.paddleSubscriptionService" class="Storytale\CustomerActivity\PortAdapters\Secondary\Subscription\Paddle\PaddleSubscriptionService">
            <argument type="service" id="storytale.portAdapters.secondary.serviceClient.paddle.paddleServiceClient"/>
        </service>
        <!-- Port adapter END -->

        <!-- Console command -->
        <service id="Storytale\CustomerActivity\PortAdapters\Primary\App\Symfony\Console\Commands\SubscriptionPlan\SyncWithPaddleCommand" class="Storytale\CustomerActivity\PortAdapters\Primary\App\Symfony\Console\Commands\SubscriptionPlan\SyncWithPaddleCommand" public="true">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.persistence.doctrine.doctrineSubscriptionPlanRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.portAdapters.secondary.serviceClient.paddle.paddleServiceClient"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.dto.subscriptionPlanDTOAssembler"/>
        </service>

        <service id="Storytale\CustomerActivity\PortAdapters\Primary\App\Symfony\Console\Commands\Subscription\ProlongateSubscriptionCommand" class="Storytale\CustomerActivity\PortAdapters\Primary\App\Symfony\Console\Commands\Subscription\ProlongateSubscriptionCommand" public="true">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.subscription.persistence.doctrine.doctrineSubscriptionRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.portAdapters.secondary.eventBus.storytaleEventBus"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.dto.membershipDTOAssembler"/>
            <argument type="service" id="storytale.customerActivity.application.command.subscription.dto.subscriptionDTOAssembler"/>
        </service>

        <service id="Storytale\CustomerActivity\PortAdapters\Primary\App\Symfony\Console\Commands\Customer\MigrateOldLikesCommand" class="Storytale\CustomerActivity\PortAdapters\Primary\App\Symfony\Console\Commands\Customer\MigrateOldLikesCommand" public="true">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineCustomerRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.querying.aura.auraOldCustomerDataProvider"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineLikeRepository"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.customer.customerLikeFactory"/>
            <argument type="service" id="storytale.portAdapters.secondary.serviceClient.inventory.inventoryServiceClient"/>
        </service>

        <service id="Storytale\CustomerActivity\PortAdapters\Primary\App\Symfony\Console\Commands\Customer\MigrateOldDownloadsCommand" class="Storytale\CustomerActivity\PortAdapters\Primary\App\Symfony\Console\Commands\Customer\MigrateOldDownloadsCommand" public="true">
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.persistence.doctrine.doctrineCustomerRepository"/>
            <argument type="service" id="storytale.portAdapters.secondary.persistence.doctrine.doctrineDomainSession"/>
            <argument type="service" id="storytale.customerActivity.portAdapters.secondary.customer.querying.aura.auraOldCustomerDataProvider"/>
            <argument type="service" id="storytale.customerActivity.domain.persistModel.customer.downloadProcessingService"/>
            <argument type="service" id="storytale.portAdapters.secondary.serviceClient.inventory.inventoryServiceClient"/>
            <argument type="service" id="storytale.portAdapters.secondary.serviceClient.inventory.inventoryServiceClient"/>
        </service>
        <!-- Console command END -->

    </services>
</container>